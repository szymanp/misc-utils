#!/usr/bin/env python3

import os
import re
import sys
import getpass
import optparse
import subprocess
import glob

GPG="/usr/bin/gpg"
KEY="FD33EDD3"

def setupParser():
    usageText = """%prog [<options>]"""

    parser = optparse.OptionParser(usage=usageText)
    
    optionGroup = optparse.OptionGroup(parser, "Actions")
    optionGroup.add_option("-t", "--task", 
                           action="store",
                           dest="task",
                           metavar="TASK",
                           default="find",
                           type="string",
                           help="Use 'find' to find passwords and 'set' to set them.")
    parser.add_option_group(optionGroup)

    optionGroup = optparse.OptionGroup(parser, "Parameters")
    optionGroup.add_option("--database-file",
                           action="store",
                           dest="databaseFile",
                           metavar="FILE",
                           type="string",
                           default="~/passwds.gpg",
                           help="The database file to use.")
    optionGroup.add_option("--database-backup-count",
                           action="store",
                           dest="databaseBackupCount",
                           metavar="NUMBER",
                           type="int",
                           default=5,
                           help="The number of old database files to keep.")
    optionGroup.add_option("-a", "--account",
                           action="store",
                           dest="account",
                           metavar="NAME")
    optionGroup.add_option("-u", "--username",
                           action="store",
                           dest="username",
                           metavar="NAME",
                           type="string",
                           help="The username associated with the password.")
    parser.add_option_group(optionGroup)

    (options, args) = parser.parse_args()

    return options

def indent(s):
    return "  " + s.replace("\n", "\n  ")

class Password(object):
    def __init__(self):
        self.account = ""
        self.username = ""
        self.password = ""

    def readFromLine(self, line):
        # Determine the separator - a tab or space.
        separator = "\t" if "\t" in line else " "

        # Remove multiple separators one after another
        line = re.sub(separator + '+', separator, line)
        parts = line.split(separator)
        
        if len(parts) < 3:
            print("Invalid record in database file:")
            print(line)
            sys.exit(1)
        
        self.account  = parts[0]
        self.username = parts[1]
        self.password = parts[2]
        return self

    def matches(self, account, username = None):
        return account.lower() in self.account.lower() \
               and (username.lower() in self.username.lower() if username != None else True)
        
    def tabbed(self):
        return "%s\t%s\t%s" % (self.account, self.username, self.password)
    
    def __str__(self):
        return self.account.ljust(15) + " " + self.username.ljust(25) + " " + self.password

class Database(object):
    def __init__(self, dbfile, master_password, backup_count = 0):
        self.dbfile = os.path.abspath(os.path.expanduser(dbfile))
        self.master_password = master_password
        self.backup_count = backup_count

        self.passwords = []
        self._read()

    def write(self):
        outputFile = self.dbfile + "~"
        
        if os.path.exists(outputFile):
            os.unlink(outputFile)
        
        handle = subprocess.Popen([GPG, "--encrypt", "--recipient", KEY, "--output", outputFile], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (out, err) = handle.communicate(input=self._writePlainDatabase())
        
        if handle.returncode != 0:
            print((handle.returncode))
            print("Could not write database.")
            print(out)
            print(err)
            sys.exit(1)

        if not os.path.exists(outputFile):
            print("The output file was not created.")
            sys.exit(1)
            
        if self.backup_count > 0:
            self._rotate()
        else:
            os.unlink(self.dbfile)
        os.rename(outputFile, self.dbfile)
        
    def _read(self):
        if not os.path.exists(self.dbfile):
            return

        handle = subprocess.Popen([GPG, "--batch", "--passphrase-fd", "0", "--decrypt", self.dbfile], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        handle.stdin.write(self.master_password)
        (out, err) = handle.communicate()

        if handle.returncode != 0:
            print("Could not write database:")
            print((indent(err)))
            sys.exit(1)

        self._readPlainDatabase(out.split("\n"))
        
    def _readPlainDatabase(self, lines):
        self.passwords = [Password().readFromLine(line) for line in lines if line.strip() != ""]

    def _writePlainDatabase(self):
        return "\n".join([password.tabbed() for password in self.passwords])
        
    def _rotate(self):
        files = [self.dbfile] + sorted(glob.glob(self.dbfile + ".*"))
        zipped = reversed(list(zip(list(range(0, len(files))), files)))
        
        for index, file in zipped:
            if index < self.backup_count:
                os.rename(file, "%s.%d" % (self.dbfile, index))
            else:
                os.unlink(file)

def findPassword(database, account, username):
    passwords = [password for password in database.passwords if password.matches(account, username)]
    if len(passwords) > 0:
        for password in passwords:
            print(password)
    else:
        print("Nothing found.")

def setPassword(database, account, username):
    passwords = [password for password in database.passwords if password.matches(account, username)]
    if len(passwords) > 1:
        print("More than one existing password matches. Narrow down your criteria.")

        for password in passwords:
            print(password)

    elif len(passwords) == 1:
        password = passwords[0]
        print("Modifying existing password.")
        print(password)
        password.password = getpass.getpass("Password: ")
        database.write()
        print(password)

    else:
        print(("New password for account '%s' and username '%s'." % (account, username)))
        password = Password()
        password.account = account
        password.username = username
        password.password = getpass.getpass("Password: ")
        database.passwords.append(password)
        database.write()
        print(password)

def main():
    args = setupParser()
    
    if args.account is None:
        print("Please specify an account (-a)")
        sys.exit(1)
    
    if args.task:
        # Prompt for password and open the database
        master_password = getpass.getpass("Master password: ")
        database = Database(args.databaseFile, master_password, args.databaseBackupCount)
    
        if args.task == "find":
            findPassword(database, args.account, args.username)
        elif args.task == "set":
            setPassword(database, args.account, args.username)

    
if __name__ == "__main__":
    main()
